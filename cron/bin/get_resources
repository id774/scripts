#!/bin/sh

########################################################################
# get_resources: System Resource Snapshot Collector
#
#  Description:
#  This script is designed to be executed automatically via cron (e.g.,
#  in /etc/cron.daily) to collect system resource information. It delegates
#  the actual collection logic to a separate script (`get_resources.sh`)
#  and captures the output into a unified job log.
#  After the main collection, if SERVER_ALIVE_CHECK points to an executable
#  script (default: /etc/cron.exec/server_alive_check.sh), it will be
#  executed as an optional post-check. If absent, it is silently skipped.
#
#  Author: id774 (More info: http://id774.net)
#  Source Code: https://github.com/id774/scripts
#  License: The GPL version 3, or LGPL version 3 (Dual License).
#  Contact: idnanashi@gmail.com
#
#  Usage:
#      ./get_resources
#      This script is intended to be executed periodically by cron.
#
#  Cron Usage:
#      Place this script into /etc/cron.hourly to run it once a day.
#      Or create a specific cron entry like the following:
#      5 * * * * root /path/to/get_resources
#
#  Version History:
#  v1.4 2025-10-14
#       Add optional post-check hook via SERVER_ALIVE_CHECK executed after main.
#       Rename SCRIPT to GET_RESOURCES for naming consistency.
#  v1.3 2025-07-30
#       Update script path to /etc/cron.exec/get_resources.sh to align with new cron execution structure.
#  v1.2 2025-06-23
#       Unified usage output to display full script header and support common help/version options.
#  v1.1 2025-05-16
#       Add return 0 to main and exit $? at script end for consistent exit status.
#  v1.0 2025-05-10
#       Refactor into POSIX-compliant, function-based structure with unified logging.
#  v0.1 2008-08-22
#       Initial release. Simple wrapper for get_resources.sh with logging.
#
########################################################################

# Display full script header information extracted from the top comment block
usage() {
    awk '
        BEGIN { in_header = 0 }
        /^#{10,}$/ { if (!in_header) { in_header = 1; next } else exit }
        in_header && /^# ?/ { print substr($0, 3) }
    ' "$0"
    exit 0
}

# Check if the script is running from cron
is_running_from_cron() {
    if tty -s; then
        return 1  # Terminal attached (interactive session)
    else
        return 0  # No terminal (likely cron)
    fi
}

# Check if JOBLOG is writable
is_joblog_writable() {
    if [ ! -w "$JOBLOG" ] && ! touch "$JOBLOG" 2>/dev/null; then
        echo "[ERROR] JOBLOG is not writable: $JOBLOG" >&2
        exit 1
    fi
}

# Initialize environment and log job start
initialize() {
    JOBLOG="/var/log/sysadmin/resources.log"
    GET_RESOURCES="/etc/cron.exec/get_resources.sh"
    SERVER_ALIVE_CHECK="/etc/cron.exec/server_alive_check.sh"

    if ! is_running_from_cron; then
        echo "[ERROR] This script is intended to be run by cron only." >&2
        exit 1
    fi

    is_joblog_writable

    echo -n "*** $0: Job started on $(hostname) at " >> "$JOBLOG" 2>&1
    date "+%Y/%m/%d %T" >> "$JOBLOG" 2>&1
}

# Execute the main script
call_main_script() {
    if [ -x "$GET_RESOURCES" ]; then
        echo "[INFO] Executing: $GET_RESOURCES" >> "$JOBLOG" 2>&1
        "$GET_RESOURCES" >> "$JOBLOG" 2>&1
    else
        echo "[ERROR] Resource script not found or not executable: $GET_RESOURCES" >> "$JOBLOG" 2>&1
    fi
}

# Optionally execute server alive check after the main script
call_server_alive_check() {
    # Run only if the post-check script exists and is executable
    if [ -x "$SERVER_ALIVE_CHECK" ]; then
        echo "[INFO] Executing post-check: $SERVER_ALIVE_CHECK" >> "$JOBLOG" 2>&1
        "$SERVER_ALIVE_CHECK" >> "$JOBLOG" 2>&1
        # No else branch: silently skip if not present or not executable
    fi
}

# Finalize job and log completion
finalize() {
    echo -n "*** $0: Job ended on $(hostname) at " >> "$JOBLOG" 2>&1
    date "+%Y/%m/%d %T" >> "$JOBLOG" 2>&1
    echo >> "$JOBLOG" 2>&1
}

# Main entry point of the script
main() {
    case "$1" in
        -h|--help|-v|--version) usage ;;
    esac

    initialize
    call_main_script
    call_server_alive_check
    finalize

    return 0
}

# Execute main function
main "$@"
exit $?
