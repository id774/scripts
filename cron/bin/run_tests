#!/bin/sh

########################################################################
# run_tests: Automated Testing Script for Python and Ruby projects
#
#  Description:
#  This script automates the process of running tests for projects developed
#  in Python and Ruby. It loads configuration settings from an external '.conf'
#  file, iterates through specified versions of Python and Ruby to run tests,
#  and performs a compatibility check using the last Python version in the loop.
#  It is intended to be executed automatically via cron jobs and sends a summary
#  email to an administrator upon completion.
#
#  Author: id774 (More info: http://id774.net)
#  Source Code: https://github.com/id774/scripts
#  License: The GPL version 3, or LGPL version 3 (Dual License).
#  Contact: idnanashi@gmail.com
#
#  Version History:
#  v1.4 2025-04-28
#       Add execution of test/check_scripts.sh after Python and Ruby tests if available.
#       Fully refactor run_tests into function-based structure.
#       Modify test iteration logic to pair each Python version with the corresponding Ruby version.
#  v1.3 2025-04-13
#       Unify log level formatting using [INFO], [WARN], and [ERROR] tags.
#  v1.2 2025-03-19
#       Improved POSIX compliance, standardized logging, and enhanced
#       readability through function encapsulation.
#  v1.1 2024-04-08
#       Made ADMIN_MAIL_ADDRESS optional for email notifications.
#  v1.0 2024-03-13
#       Initial release. Features include dynamic version testing for Python
#       and Ruby, external configuration loading, and compatibility checking.
#
#  Usage:
#  This script is designed to be run automatically through a cron job. Ensure
#  that 'run_tests.conf' is properly configured with the SCRIPTS, JOBLOG,
#  python_versions, ruby_versions, and ADMIN_MAIL_ADDRESS variables. For manual
#  execution, run the script:
#      ./run_tests
#
#  The script iterates through the specified versions, runs tests for each
#  combination of Python and Ruby versions, concludes with a compatibility
#  check using the last Python version tested, and sends a summary email to
#  the administrator.
#
#  Configuration file ('run_tests.conf') requirements:
#  - SCRIPTS: Path to the scripts directory.
#  - JOBLOG: Path to the job log file.
#  - python_versions: Space-separated list of Python versions to test.
#  - ruby_versions: Space-separated list of Ruby versions to test.
#  - ADMIN_MAIL_ADDRESS: Email address of the administrator to notify.
#  Ensure these variables are set in 'run_tests.conf'.
#
#  Notes:
#  - The script is designed to be run in environments where Python and Ruby
#    are used for development and testing.
#  - Ensure the specified Python and Ruby versions are installed and accessible.
#
#  Error Conditions:
#  0. All tests completed successfully.
#  1. Some tests failed.
#  3. Configuration file not found.
#  4. Configuration variables not set.
#
########################################################################

# Function to determine the script's directory and load configuration
initialize() {
    SCRIPT_DIR=$(dirname "$0")

    CONF_FILE="$SCRIPT_DIR/etc/run_tests.conf"
    if [ ! -f "$CONF_FILE" ]; then
        CONF_FILE="$SCRIPT_DIR/../etc/run_tests.conf"
        if [ ! -f "$CONF_FILE" ]; then
            echo "Configuration file not found." >> "$JOBLOG" 2>&1
            exit 3
        fi
    fi
    . "$CONF_FILE"

    if [ -z "$SCRIPTS" ] || [ -z "$JOBLOG" ] || [ -z "$python_versions" ] || [ -z "$ruby_versions" ]; then
        echo "[ERROR] Configuration variables not set. Check run_tests.conf." >> "$JOBLOG" 2>&1
        exit 4
    fi

    echo -n "*** $0: Job started on $(hostname) at " >> "$JOBLOG" 2>&1
    date "+%Y/%m/%d %T" >> "$JOBLOG" 2>&1
}

# Function to execute tests for a given Python and Ruby version
run_tests() {
    python_version="$1"
    ruby_version="$2"

    if [ -n "$ruby_version" ]; then
        echo "=== Running Tests with Python $python_version and Ruby $ruby_version. ===" >> "$JOBLOG" 2>&1
        "$SCRIPTS/run_tests.sh" "/opt/python/$python_version/bin/python" "/opt/ruby/$ruby_version/bin/rspec" >> "$JOBLOG" 2>&1
    else
        echo "=== Running Tests with Python $python_version only. ===" >> "$JOBLOG" 2>&1
        "$SCRIPTS/run_tests.sh" "/opt/python/$python_version/bin/python" >> "$JOBLOG" 2>&1
    fi
}

# Function to run shell script validation if available
run_check_scripts() {
    if [ -x "$SCRIPTS/test/check_scripts.sh" ]; then
        echo >> "$JOBLOG" 2>&1
        echo "=== Running check_scripts.sh for shell script validation. ===" >> "$JOBLOG" 2>&1
        "$SCRIPTS/test/check_scripts.sh" >> "$JOBLOG" 2>&1
        result=$?
        if [ "$result" -ge 1 ]; then
            echo "[WARN] Some tests failed in shell script tests. Check logs for details." >> "$JOBLOG" 2>&1
        else
            echo "[INFO] All shell script tests completed successfully." >> "$JOBLOG" 2>&1
        fi
        echo >> "$JOBLOG" 2>&1
    fi
}

# Function to perform Python compatibility check
run_compatibility_check() {
    echo "=== Checking Python compatibility with Python $last_python_version. ===" >> "$JOBLOG" 2>&1
    "/opt/python/$last_python_version/bin/python" "$SCRIPTS/find_pycompat.py" "$SCRIPTS" >> "$JOBLOG" 2>&1
    result=$?

    if [ "$result" -ge 1 ]; then
        echo "[WARN] Python compatibility inspection failed. Check logs for details." >> "$JOBLOG" 2>&1
    elif grep -q "Some tests failed" "$JOBLOG"; then
        echo "[WARN] Some tests failed. Check logs for details." >> "$JOBLOG" 2>&1
    else
        echo "[INFO] All tests completed successfully for all versions." >> "$JOBLOG" 2>&1
    fi
}

# Function to log job ending
log_job_end() {
    echo >> "$JOBLOG" 2>&1
    echo -n "*** $0: Job ended on $(hostname) at " >> "$JOBLOG" 2>&1
    date "+%Y/%m/%d %T" >> "$JOBLOG" 2>&1
    echo >> "$JOBLOG" 2>&1
}

# Function to send a summary email to the administrator
send_mail_to_admin() {
    cat -v "$JOBLOG" | nkf -w | \
      mail -s "[cron][$(hostname)] CI Results Overview" \
      "$ADMIN_MAIL_ADDRESS"
}

# Main function to execute the script
main() {
    initialize

    last_python_version=""

    py_list=$(echo "$python_versions")
    rb_list=$(echo "$ruby_versions")

    py_index=1
    rb_index=1

    set -- $py_list
    for python_version; do
        # Get the corresponding ruby_version
        ruby_version=$(echo "$rb_list" | awk -v n="$rb_index" '{print $n}')
        if [ -n "$ruby_version" ]; then
            run_tests "$python_version" "$ruby_version"
        else
            run_tests "$python_version" ""
        fi
        last_python_version="$python_version"
        rb_index=$((rb_index + 1))
    done

    run_check_scripts
    run_compatibility_check
    log_job_end

    if [ -n "$ADMIN_MAIL_ADDRESS" ]; then
        send_mail_to_admin
    fi
}

# Execute main function
main "$@"
