########################################################################
# send_files.conf
#
#  This file is sourced by send_files.sh to define paths, email
#  parameters, archive settings, and optional storage details for
#  sending or storing files securely.
#
#  Rules:
#  - Blank lines are allowed.
#  - Lines starting with '#' are comments.
#  - This file must be POSIX sh compatible.
#  - Do not add a shebang; this file is sourced, not executed.
#
#  Variables:
#  - TMP                 : Temporary directory for archive and password file.
#  - GMAIL_TO            : Gmail recipient address (REQUIRED).
#  - MAIL_SUBJECT        : Email subject line.
#  - SOURCE_DIR          : Directory to be archived and sent (REQUIRED).
#  - PASSWORD_LENGTH     : Length of the random password.
#  - PASSWORD_FILE_NAME  : File name for password file.
#  - ARCHIVE_FILE_NAME   : Base name for ZIP archive (timestamp and extension added automatically).
#  - ARCHIVE_OUTPUT_DIR  : Directory for saving archive if not emailed.
#  - DOWNLOAD_PATH       : Web path part used to derive download URL (default: "archive").
#  - DOWNLOAD_BASE_URL   : (Optional) Explicit base URL. If unset, script derives from host FQDN.
#
#  Notes:
#  - Optional archive format switch to 7z is controlled by command-line
#    options (-z or --7z) in send_files.sh, not in this file.
#
########################################################################

# Temporary directory to store the archive and password file
# Default: $HOME/tmp
TMP="$HOME/.tmp"

# Gmail recipient address (REQUIRED)
# Example: GMAIL_TO="your.name@gmail.com"
GMAIL_TO="sysad.idnanashi@gmail.com"

# Email subject line
# Default: [admin] Server Files
# Example: MAIL_SUBJECT="Monthly Report Archive"
MAIL_SUBJECT="[admin] Server Files"

# Directory to be archived and sent (REQUIRED)
# Example: SOURCE_DIR="/home/share/received"
SOURCE_DIR="/home/share/received"

# Length of the random password (Default: 20)
# Example: PASSWORD_LENGTH=25
PASSWORD_LENGTH=25

# File name for the password file (stored under $TMP)
# Default: zip_password.txt
# Example: PASSWORD_FILE_NAME="send_file.txt"
PASSWORD_FILE_NAME="secure_files_pass.txt"

# Base name for the ZIP archive (timestamp and .zip will be added automatically)
# Example: ARCHIVE_FILE_NAME="secure_files"
ARCHIVE_FILE_NAME="secure_files"

# Output directory where the archive file will be saved if not sending by email
# This directory must exist at runtime. Script will fail if missing.
# Example: ARCHIVE_OUTPUT_DIR="/var/www/files"
ARCHIVE_OUTPUT_DIR="/var/www/archive"

# Web path used to build download URL when not sending by email.
# Final URL becomes: https://<host>/${DOWNLOAD_PATH}/<filename>
# Example: DOWNLOAD_PATH="archive"
DOWNLOAD_PATH="archive"

# Optional: If you need to force a specific base URL, set this.
# Otherwise the script will use host FQDN and DOWNLOAD_PATH.
# Example: DOWNLOAD_BASE_URL="https://files.example.com/archive"
# DOWNLOAD_BASE_URL=""

# Optional: Use 7z instead of zip for archive format (enabled via command-line option -z or --7z)
# 7z provides stronger encryption (AES-256) and better compression for large directories.
# If omitted, standard zip with password protection will be used.
# No value needs to be set hereâ€”this is controlled entirely via script options.
# Example usage: ./send_files.sh --7z
