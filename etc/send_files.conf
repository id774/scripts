# etc/send_files.conf - Configuration for send_files.sh

# Temporary directory to store the archive and password file
# Default: $HOME/tmp
TMP="$HOME/.tmp"

# Gmail recipient address (REQUIRED)
# Example: GMAIL_TO="your.name@gmail.com"
GMAIL_TO="sysad.idnanashi@gmail.com"

# Email subject line
# Default: [admin] Server Files
# Example: MAIL_SUBJECT="Monthly Report Archive"
MAIL_SUBJECT="[admin] Server Files"

# Directory to be archived and sent (REQUIRED)
# Example: SOURCE_DIR="/home/share/received"
SOURCE_DIR="/home/share/received"

# Length of the random password (Default: 20)
# Example: PASSWORD_LENGTH=25
PASSWORD_LENGTH=25

# File name for the password file (stored under $TMP)
# Default: zip_password.txt
# Example: PASSWORD_FILE_NAME="send_file.txt"
PASSWORD_FILE_NAME="secure_files_pass.txt"

# Base name for the ZIP archive (timestamp and .zip will be added automatically)
# Example: ARCHIVE_FILE_NAME="secure_files"
ARCHIVE_FILE_NAME="secure_files"

# Output directory where the archive file will be saved if not sending by email
# This directory must exist at runtime. Script will fail if missing.
# Example: ARCHIVE_OUTPUT_DIR="/var/www/files"
ARCHIVE_OUTPUT_DIR="/var/www/archive"

# Optional: Use 7z instead of zip for archive format (enabled via command-line option -z or --7z)
# 7z provides stronger encryption (AES-256) and better compression for large directories.
# If omitted, standard zip with password protection will be used.
# No value needs to be set hereâ€”this is controlled entirely via script options.
# Example usage: ./send_files.sh --7z
